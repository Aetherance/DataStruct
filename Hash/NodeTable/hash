#include<iostream>
using namespace std;

struct Hnode
{
    Hnode(int,int);
    int key;
    int val;
    Hnode * next;
};

Hnode::Hnode(int key,int val) {
    next = nullptr;
    this->key = key;
    this->val = val;
}

class hashtable
{
public:
    hashtable(int);
    ~hashtable();
    Hnode* GetKeyNode(int);
    int GetValue(int);
    void Insert(int,int);
    int operator[](int);
private:
    Hnode**data;
    int HashNum;
    int Size;
    int hash(int);
};

hashtable::hashtable(int Size) {
    data = new Hnode*[Size]();
    HashNum = Size;
    this->Size = Size;
}

hashtable::~hashtable() {
    for(int i = 0;i<Size;i++) {
        Hnode *target = data[i];
        if(target == nullptr) {
            continue;
        }
        while (target) {
            Hnode * temp = target;
            target = target->next;
            delete temp;
        }
    }
    delete[] data;
}

int hashtable::hash(int key) {
    return key % HashNum;
}

Hnode*hashtable::GetKeyNode(int key) {
    Hnode * target = data[hash(key)];
    if(target == nullptr) {
        return nullptr;
    }
    while (target->next!=nullptr&&target->key!=key) {
        target = target->next;
    }
    return target->key == key ? target : nullptr;
}

int hashtable::GetValue(int key) {
    Hnode * keyNode = GetKeyNode(key);
    return keyNode ? keyNode->val : -1;
}

Hnode * BuyNewnode(int key,int val) {
    return new Hnode(key,val);
}

void hashtable::Insert(int key,int val) {
    Hnode * key_node;
    if(key_node = GetKeyNode(key)) {
        key_node->key = key;
        key_node->val = val;
        return;
    }
    key_node = data[hash(key)];
    Hnode * newnode = BuyNewnode(key,val);
    if(key_node==nullptr) {
        data[hash(key)] = newnode;
        return;
    }
    while (key_node->next) {
        key_node = key_node->next;
    }
    key_node->next = newnode;
}

int hashtable::operator[](int key){
    return GetValue(key);
}